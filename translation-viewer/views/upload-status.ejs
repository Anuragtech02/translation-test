<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upload Status - Translation Viewer</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .status-badge {
      font-size: 0.8rem;
      border-radius: 30px;
      padding: 5px 15px;
    }
    .status-completed {
      background-color: #28a745;
      color: white;
    }
    .status-failed {
      background-color: #dc3545;
      color: white;
    }
    .status-uploading {
      background-color: #007bff;
      color: white;
      animation: pulse 1.5s infinite;
    }
    .status-pending {
      background-color: #6c757d;
      color: white;
    }
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.6; }
      100% { opacity: 1; }
    }
    .progress-card {
      border-left: 4px solid #0d6efd;
      transition: all 0.3s ease;
    }
    .progress-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,.12);
    }
    .refresh-btn {
      cursor: pointer;
    }
    .file-item:hover {
      background-color: #f8f9fa;
    }
    .error-message {
      font-size: 0.85rem;
      padding: 10px;
      background-color: #f8d7da;
      border-radius: 4px;
      margin-top: 5px;
    }
    #uploadProgressChart {
      max-height: 300px;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="/">Translation Viewer</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/upload-status">Upload Status</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>Upload Status Dashboard</h1>
      <div>
        <span class="text-muted me-2 fs-6">Auto-refresh: <span id="countdown">30</span>s</span>
        <button id="refreshButton" class="btn btn-outline-primary">
          <i class="bi bi-arrow-clockwise"></i> Refresh Now
        </button>
      </div>
    </div>

    <div class="row mb-4" id="statsRow">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-body">
            <div class="d-flex justify-content-between">
              <h5 class="card-title">Upload Progress</h5>
              <span class="text-muted small" id="lastUpdated">Last updated: Never</span>
            </div>
            <div class="row" id="statsCards">
              <div class="col-md-3 mb-3">
                <div class="card progress-card h-100">
                  <div class="card-body">
                    <h5 class="card-title text-primary">Total Files</h5>
                    <h2 id="totalCount">-</h2>
                  </div>
                </div>
              </div>
              <div class="col-md-3 mb-3">
                <div class="card progress-card h-100">
                  <div class="card-body">
                    <h5 class="card-title text-primary">Pending</h5>
                    <h2 id="pendingCount">-</h2>
                  </div>
                </div>
              </div>
              <div class="col-md-3 mb-3">
                <div class="card progress-card h-100">
                  <div class="card-body">
                    <h5 class="card-title text-primary">Completed</h5>
                    <h2 id="completedCount">-</h2>
                  </div>
                </div>
              </div>
              <div class="col-md-3 mb-3">
                <div class="card progress-card h-100">
                  <div class="card-body">
                    <h5 class="card-title text-primary">Failed</h5>
                    <h2 id="failedCount">-</h2>
                  </div>
                </div>
              </div>
            </div>

            <div class="row mt-3">
              <div class="col-md-9">
                <div class="progress" style="height: 30px;">
                  <div id="completedProgress" class="progress-bar bg-success" role="progressbar" style="width: 0%">0%</div>
                  <div id="uploadingProgress" class="progress-bar bg-primary progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%">0%</div>
                  <div id="pendingProgress" class="progress-bar bg-secondary" role="progressbar" style="width: 0%">0%</div>
                  <div id="failedProgress" class="progress-bar bg-danger" role="progressbar" style="width: 0%">0%</div>
                </div>
              </div>
              <div class="col-md-3">
                <div id="currentUploadContainer" class="d-none">
                  <span class="text-muted">Currently uploading:</span>
                  <div id="currentUpload" class="text-truncate"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col-12">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Upload History</h5>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>File</th>
                    <th>Status</th>
                    <th>Started</th>
                    <th>Completed</th>
                  </tr>
                </thead>
                <tbody id="uploadHistoryTable">
                  <tr>
                    <td colspan="4" class="text-center">Loading upload history...</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-3">
              <button id="showMoreBtn" class="btn btn-outline-secondary d-none">Show More</button>
              <span id="historyCount" class="text-muted">Showing 0 of 0 files</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initial variables
      let uploadStatus = {};
      let displayLimit = 10;
      let countdownValue = 30;
      let countdownInterval;

      // DOM elements
      const refreshButton = document.getElementById('refreshButton');
      const uploadHistoryTable = document.getElementById('uploadHistoryTable');
      const showMoreBtn = document.getElementById('showMoreBtn');
      const historyCount = document.getElementById('historyCount');
      const countdownElem = document.getElementById('countdown');

      // Initial load
      fetchUploadStatus();
      startCountdown();

      // Event listeners
      refreshButton.addEventListener('click', function() {
        fetchUploadStatus();
        resetCountdown();
      });

      showMoreBtn.addEventListener('click', function() {
        displayLimit += 10;
        renderUploadHistory();
      });

      // Functions
      function startCountdown() {
        clearInterval(countdownInterval);
        countdownValue = 30;
        countdownElem.textContent = countdownValue;

        countdownInterval = setInterval(() => {
          countdownValue--;
          countdownElem.textContent = countdownValue;

          if (countdownValue <= 0) {
            fetchUploadStatus();
            resetCountdown();
          }
        }, 1000);
      }

      function resetCountdown() {
        clearInterval(countdownInterval);
        startCountdown();
      }

      function fetchUploadStatus() {
        fetch('/api/upload-status')
          .then(response => response.json())
          .then(data => {
            uploadStatus = data.status;
            updateStats();
            renderUploadHistory();
          })
          .catch(error => {
            console.error('Error fetching upload status:', error);
          });

        fetch('/api/upload-status/stats')
          .then(response => response.json())
          .then(data => {
            updateProgressBars(data.stats);
          })
          .catch(error => {
            console.error('Error fetching upload stats:', error);
          });
      }

      function updateStats() {
        if (uploadStatus.lastUpdated) {
          const lastUpdatedDate = new Date(uploadStatus.lastUpdated);
          document.getElementById('lastUpdated').textContent = 'Last updated: ' + formatDateTime(lastUpdatedDate);
        }

        if (uploadStatus.currentlyUploading) {
          document.getElementById('currentUploadContainer').classList.remove('d-none');
          document.getElementById('currentUpload').textContent = uploadStatus.currentlyUploading;
        } else {
          document.getElementById('currentUploadContainer').classList.add('d-none');
        }
      }

      function updateProgressBars(stats) {
        // Update count displays
        document.getElementById('totalCount').textContent = stats.total || 0;
        document.getElementById('pendingCount').textContent = stats.pending || 0;
        document.getElementById('completedCount').textContent = stats.completed || 0;
        document.getElementById('failedCount').textContent = stats.failed || 0;

        // Update progress bars
        const total = stats.total || 0;

        if (total > 0) {
          const completedPct = Math.round((stats.completed || 0) / total * 100);
          const uploadingPct = Math.round((stats.uploading || 0) / total * 100);
          const pendingPct = Math.round((stats.pending || 0) / total * 100);
          const failedPct = Math.round((stats.failed || 0) / total * 100);

          const completedBar = document.getElementById('completedProgress');
          const uploadingBar = document.getElementById('uploadingProgress');
          const pendingBar = document.getElementById('pendingProgress');
          const failedBar = document.getElementById('failedProgress');

          completedBar.style.width = completedPct + '%';
          completedBar.textContent = completedPct + '%';

          uploadingBar.style.width = uploadingPct + '%';
          uploadingBar.textContent = uploadingPct + '%';

          pendingBar.style.width = pendingPct + '%';
          pendingBar.textContent = pendingPct + '%';

          failedBar.style.width = failedPct + '%';
          failedBar.textContent = failedPct + '%';

          // Hide bars with 0%
          completedBar.classList.toggle('d-none', completedPct === 0);
          uploadingBar.classList.toggle('d-none', uploadingPct === 0);
          pendingBar.classList.toggle('d-none', pendingPct === 0);
          failedBar.classList.toggle('d-none', failedPct === 0);
        } else {
          // No data yet
          document.getElementById('completedProgress').style.width = '0%';
          document.getElementById('uploadingProgress').style.width = '0%';
          document.getElementById('pendingProgress').style.width = '0%';
          document.getElementById('failedProgress').style.width = '0%';
        }
      }

      function renderUploadHistory() {
        if (!uploadStatus.files || Object.keys(uploadStatus.files).length === 0) {
          uploadHistoryTable.innerHTML = '<tr><td colspan="4" class="text-center">No upload history available</td></tr>';
          historyCount.textContent = 'Showing 0 of 0 files';
          showMoreBtn.classList.add('d-none');
          return;
        }

        const filesArray = Object.entries(uploadStatus.files).map(([path, data]) => {
          return { path, ...data };
        });

        // Sort by latest first (started or completed)
        filesArray.sort((a, b) => {
          const aTime = a.completedAt || a.startedAt || '';
          const bTime = b.completedAt || b.startedAt || '';
          return bTime.localeCompare(aTime);
        });

        const totalFiles = filesArray.length;
        const filesToShow = filesArray.slice(0, displayLimit);

        uploadHistoryTable.innerHTML = '';

        filesToShow.forEach(file => {
          const row = document.createElement('tr');
          row.className = 'file-item';

          // Extract content type and slug from path
          let contentType = 'Unknown';
          let itemSlug = 'Unknown';

          const pathParts = file.path.split('/');
          if (pathParts.length >= 3) {
            contentType = pathParts[1];
            itemSlug = pathParts[2];
          }

          // Create file cell with path info
          const fileCell = document.createElement('td');
          fileCell.innerHTML = `
            <div>${file.path}</div>
            <small class="text-muted">Content Type: ${contentType}, Item: ${itemSlug}</small>
          `;

          // Create status cell with badge
          const statusCell = document.createElement('td');
          const status = file.status || 'pending';
          statusCell.innerHTML = `<span class="badge status-badge status-${status}">${status}</span>`;

          if (file.error) {
            statusCell.innerHTML += `
              <div class="error-message">
                <small>${file.error}</small>
              </div>
            `;
          }

          // Create started at cell
          const startedCell = document.createElement('td');
          startedCell.textContent = file.startedAt ? formatDateTime(new Date(file.startedAt)) : '-';

          // Create completed at cell
          const completedCell = document.createElement('td');
          completedCell.textContent = file.completedAt ? formatDateTime(new Date(file.completedAt)) : '-';

          // Add cells to row
          row.appendChild(fileCell);
          row.appendChild(statusCell);
          row.appendChild(startedCell);
          row.appendChild(completedCell);

          // Add row to table
          uploadHistoryTable.appendChild(row);
        });

        // Update show more button visibility
        if (totalFiles > displayLimit) {
          showMoreBtn.classList.remove('d-none');
          historyCount.textContent = `Showing ${filesToShow.length} of ${totalFiles} files`;
        } else {
          showMoreBtn.classList.add('d-none');
          historyCount.textContent = `Showing ${filesToShow.length} file${filesToShow.length !== 1 ? 's' : ''}`;
        }
      }

      function formatDateTime(date) {
        return date.toLocaleString();
      }
    });
  </script>
</body>
</html>
